# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ☁️ Publish - npm Publish and Github Release

on:
  workflow_call:
    inputs:
      commit-hash:
        description: Commit to checkout
        required: false
        type: string
      tag-name:
        description: Tag name
        required: false
        type: string
      skip-npm:
        description: Skip npm publish
        required: false
        type: boolean

env:
  node_version: 20.x
  pnpm_version: 8.x

jobs:
  publish-npm:
    name: ☁️ Publish npm
    runs-on: ubuntu-latest

    steps:
      - name: ⛙ Checkout branch ${{ github.ref }}
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: 🚧 Build
        uses: ./.github/actions/build
        with:
          script: 'build:web'
          node_version: ${{ env.node_version }}
          pnpm_version: ${{ env.pnpm_version }}

          trakt_production_id: ${{ secrets.VITE_TRAKT_PRODUCTION_ID }}
          trakt_production_secret: ${{ secrets.VITE_TRAKT_PRODUCTION_SECRET }}

          trakt_staging_id: ${{ secrets.VITE_TRAKT_STAGING_ID }}
          trakt_staging_secret: ${{ secrets.VITE_TRAKT_STAGING_SECRET }}

          tmdb_api_key: ${{ secrets.VITE_TMDB_API_KEY }}
          tmdb_read_token: ${{ secrets.VITE_TMDB_READ_TOKEN }}

          tvdb_api_key: ${{ secrets.VITE_TVDB_API_KEY }}

      - name: 💾 Restore build artefacts
        uses: actions/cache/save@v4
        id: cache
        with:
          path: dist
          key: ${{ github.ref }}-${{ github.run_id }}-build

      - name: ☁️ Publish to npm
        if: ${{ inputs.skip-npm != true }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # =================  ☁️ Publish to npm =================
          pnpm publish


  publish-store:
    name: 🚀 Publish extension
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}

    steps:
      - name: ⛙ Checkout branch ${{ github.ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit-hash || 'main' }}
          fetch-depth: 0

      - name: 🚧 Build
        uses: ./.github/actions/build
        with:
          script: 'build'
          node_version: ${{ env.node_version }}
          pnpm_version: ${{ env.pnpm_version }}

          trakt_production_id: ${{ secrets.VITE_TRAKT_PRODUCTION_ID }}
          trakt_production_secret: ${{ secrets.VITE_TRAKT_PRODUCTION_SECRET }}

          trakt_staging_id: ${{ secrets.VITE_TRAKT_STAGING_ID }}
          trakt_staging_secret: ${{ secrets.VITE_TRAKT_STAGING_SECRET }}

          tmdb_api_key: ${{ secrets.VITE_TMDB_API_KEY }}
          tmdb_read_token: ${{ secrets.VITE_TMDB_READ_TOKEN }}

          tvdb_api_key: ${{ secrets.VITE_TVDB_API_KEY }}

      - name: 🗃️ Zip build folder
        run: |
          # =================  🗃️ Zipping build folder  =================

          # Zipping dist folder for artifact upload
          cd dist;
          zip -r trakt-extension.zip *

          # Check zip created
          echo "Zip created in 'dist/'"
          ls -l  trakt-extension.zip
          cd ..

      - name: 📝 Generate Release changelog
        run: |
          # =================  📝 Generate Release changelog  =================

          pnpm run release:changelog

      - name: 🏷️ Fetch latest tag
        if: ${{ inputs.tag-name == '' }}
        id: latest-tag
        run: |
          # =================  🏷️ Fetch tags  =================

          tag_name=$(git describe --abbrev=0 --match 'v*')
          echo "Tag found: '\e[34m$tag_name\e[0m'"
          echo "TAG_NAME=$tag_name" >> "$GITHUB_OUTPUT"

      - name: 📦 Push Release to github
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag-name || steps.latest-tag.outputs.TAG_NAME }}
          body_path: RELEASE.md
          files: dist/trakt-extension.zip

      - name: 🚀 Publish to Chrome webstore
        env:
          CHROME_WEB_STORE_EXTENSION_ID: pdodapikbijcfickiofjkjgkkmlcnbba
          CHROME_WEB_STORE_CLIENT_ID: ${{ secrets.CHROME_WEB_STORE_CLIENT_ID }}
          CHROME_WEB_STORE_CLIENT_SECRET: ${{ secrets.CHROME_WEB_STORE_CLIENT_SECRET }}
          CHROME_WEB_STORE_REFRESH_TOKEN: ${{ secrets.CHROME_WEB_STORE_REFRESH_TOKEN }}
        run: |
          # =================  🚀 Publish to Chrome store  =================

          # Uploading zip to web store
          npx -s chrome-webstore-upload-cli upload --source dist/trakt-extension.zip --extension-id "$CHROME_WEB_STORE_EXTENSION_ID" --client-id "$CHROME_WEB_STORE_CLIENT_ID" --client-secret "$CHROME_WEB_STORE_CLIENT_SECRET" --refresh-token "$CHROME_WEB_STORE_REFRESH_TOKEN"
  
